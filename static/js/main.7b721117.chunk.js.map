{"version":3,"sources":["tree/ListItem.js","tree/List.js","tree/Spinner.js","tree/index.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","text","children","path","removeItem","addItem","className","onClick","type","List","data","entries","length","map","node","index","value","items","itemPath","onKeyDown","placeholder","Spinner","role","STORE_URL","MASTER_KEY","Tree","useState","isLoading","setLoadingState","setData","fetchData","a","axios","get","headers","response","record","useEffect","saveData","newData","put","updateData","event","target","key","newNode","reduce","acc","pathIndex","push","splice","App","Container","Row","Col","alt","src","sm","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b721117.chunk.js","sourcesContent":["import React from 'react';\n\nimport './index.css';\n\n// TODO add props validation\nexport default function ListItem({ text, children, path, addItem, removeItem }) {\n  return (\n    <li className=\"list-item\">\n      {text}\n      <button\n        onClick={() => removeItem(path)}\n        type=\"button\"\n        className=\"close remove-icon\"\n        aria-label=\"Remove\"\n      >\n        <span aria-hidden=\"true\">‚ùå</span>\n      </button>\n      {children}\n    </li>\n  );\n}\n","import React from 'react';\n\nimport ListItem from './ListItem';\nimport './index.css';\n\n// TODO add props validation\nexport default function List({ data, path = [], addItem, removeItem }) {\n  const entries = data || [];\n\n  if (!entries.length) return null;\n\n  return (\n    <ol className=\"list\">\n      {entries.map((node, index) => {\n        const { value, items } = node;\n        const itemPath = [...path, index];\n\n        return (\n          <ListItem\n            key={itemPath}\n            text={value}\n            path={itemPath}\n            addItem={addItem}\n            removeItem={removeItem}\n          >\n            <List data={items} path={itemPath} addItem={addItem} removeItem={removeItem} />\n          </ListItem>\n        );\n      })}\n      <input\n        onKeyDown={addItem(path)}\n        className=\"form-control form-control-sm add-item-input\"\n        placeholder=\"Add another animal\"\n        type=\"text\"\n      />\n    </ol>\n  );\n}\n","import React from 'react';\n\nimport './index.css';\n\nexport default function Spinner() {\n  return (\n    <div className=\"spinner\">\n      <div className=\"spinner-border text-info\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n}\n","import { set, unset } from 'lodash';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport List from './List';\nimport Spinner from './Spinner';\n\nimport './index.css';\n\nconst STORE_URL = 'https://api.jsonbin.io/v3/b/61a6855f0ddbee6f8b14dad8';\nconst MASTER_KEY = '$2b$10$xJgvOstI94CVbBW4RgawUu30qbNshiErQIbBKUIJp6ursGw7Nc7Du';\n\nexport default function Tree() {\n  const [isLoading, setLoadingState] = useState(true);\n  const [data, setData] = useState();\n\n  const fetchData = async () => {\n    const response = await axios.get(`${STORE_URL}/latest`, {\n      headers: { 'X-Master-Key': MASTER_KEY },\n    });\n    setData(response.data.record);\n    setLoadingState(false);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []); // empty dependency array to only trigger on mount\n\n  const saveData = async newData => {\n    await axios.put(STORE_URL, newData, {\n      headers: { 'X-Master-Key': MASTER_KEY },\n    });\n  };\n\n  const updateData = newData => {\n    setData(newData);\n    saveData(newData);\n  };\n\n  const removeItem = path => {\n    const newData = [...data];\n\n    path.reduce((acc, pathIndex, index) => {\n      if (index + 1 === path.length) {\n        return acc.splice(pathIndex, 1);\n      }\n\n      return acc[pathIndex].items;\n    }, newData);\n\n    updateData(newData);\n  };\n\n  const addItem = path => event => {\n    const { target, key } = event;\n    if (key !== 'Enter') return;\n\n    const newData = [...data];\n    const newNode = { value: target.value };\n\n    if (!path.length) {\n      newData.push(newNode);\n    } else {\n      const lastNode = path.reduce((acc, pathIndex) => {\n        return acc[pathIndex].items;\n      }, newData);\n      lastNode.push(newNode);\n    }\n\n    updateData(newData);\n    target.value = '';\n  };\n\n  return (\n    <div className=\"tree\">\n      {isLoading ? <Spinner /> : <List data={data} addItem={addItem} removeItem={removeItem} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport \"./App.css\";\nimport Tree from \"./tree\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col>\n            <img\n              alt=\"app-logo\"\n              className=\"App-logo\"\n              src=\"https://storage.googleapis.com/tc-assets/marketing-site/icons/logo.svg\"\n            />\n            <h2>Welcome! Thanks for interviewing with Transcarent!</h2>\n            <p>\n              We're going to work with some trees today. Our goal with this\n              exercise isn't to \"stump\" anyone with tricky business, but to give\n              candidates a fair and uniform way to express themselves in code on\n              a realistic-ish problem.\n            </p>\n            <p>\n              In approximately an hour, we expect everyone will get some of the\n              way through this problem, and no one will get all the way through.\n              If invited to an on-site interview, you'll pair with us wherever\n              you left off, because we'd much rather see how you work on a\n              problem you're familiar with and have had time to think about than\n              on some clever whiteboard puzzle we spring on you. Wherever you do\n              stop, please make sure the code runs, and that the server starts.\n            </p>\n            <p>At this stage, we care most about:</p>\n            <ul>\n              <li>\n                Interpreting written specifications (following instructions)\n              </li>\n              <li>\n                General familiarity with layout, data modeling, interaction,\n                network i/o\n              </li>\n              <li>Legible code</li>\n            </ul>\n            <p>When in doubt, do less, better. :)</p>\n            <hr />\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={6}>\n            <div className=\"App-instructions\">\n              <div className=\"App-step\">\n                <span role=\"img\" aria-label=\"paint\">\n                  üé®\n                </span>\n                First, layout and style\n              </div>\n              <div className=\"App-instructions\">\n                <ol>\n                  <li>\n                    Check out the file <code>./src/tree/index.js</code>.\n                  </li>\n                  <li>\n                    Replace the inline <code>&nbsp</code> \"styling\" with an\n                    improved layout by editing the html and css in the{\" \"}\n                    <code>./src/tree/index.js</code>\n                    and <code>./tree/index.css</code> files.\n                  </li>\n                  <li>\n                    When the results look the same as the original, please\n                    commit changes to main and push to remote.\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: How would you prove that your results are exactly\n                      the same as the original? [Show your work in a new\n                      commit.]\n                    </i>\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: Can we number every line such that\n                      <code>root</code> starts with \"1\" and <code>ant</code>\n                      starts with 1.1 and ... <code>elephant</code> starts with\n                      1.2.2.1? [Show your work in a new commit.]\n                    </i>\n                  </li>\n                </ol>\n              </div>\n              <div className=\"App-step\">\n                <span role=\"img\" aria-label=\"code\">\n                  üî¢\n                </span>\n                Next, with data\n              </div>\n              <div className=\"App-instructions\">\n                <ol>\n                  <li>\n                    Check out the (empty) file <code>./src/tree/data.json</code>\n                    .\n                  </li>\n                  <li>\n                    Add a JSON object to that file that represents our animal\n                    tree. It should capture just the values and relationships\n                    currently onscreen after step one.\n                  </li>\n                  <li>\n                    Update <code>./tree/index.js</code> to use your JSON object\n                    to draw the animal tree instead of the your (styled) inline\n                    text.\n                  </li>\n                  <li>\n                    When the results look exactly the same as the original,\n                    please commit changes and push to remote.\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: Redraw the tree upside down (reading bottom to top:\n                      root, ant, bear...) [Show your work in a new commit.]\n                    </i>\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: After the first letter of each element, add as many\n                      periods as the level the element is on. (Root is 0) E.g.\n                      <code>d..og</code>. [Show your work in a new commit.]\n                    </i>\n                  </li>\n                </ol>\n              </div>\n              <div className=\"App-step\">\n                <span role=\"img\" aria-label=\"stars\">\n                  ‚ú®\n                </span>\n                Let's add interactions\n              </div>\n              <div className=\"App-instructions\">\n                <ol>\n                  <li>\n                    Add a text input field below the last element in each level,\n                    at the right indentation level. There should be one text\n                    input at level 0 after frog, one at level 1 directly above\n                    that, one below elephant at level 3, and another beneath\n                    that at level 2.\n                  </li>\n                  <li>\n                    When someone types a new word in the text box and hits\n                    enter, add that word to the tree and redraw it.\n                  </li>\n                  <li>\n                    Add an\n                    <span role=\"img\" aria-label=\"cross\">\n                      {\" \"}\n                      ‚ùå\n                    </span>\n                    after every element on the tree. When a user clicks the\n                    <span role=\"img\" aria-label=\"cross\">\n                      {\" \"}\n                      ‚ùå\n                    </span>\n                    , remove that node.\n                  </li>\n                  <li>\n                    When you can add and remove items from the tree, commit your\n                    changes and push to remote.\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: Add a toggle to the page that alphabetizes the\n                      tree, when toggled one way, or restores the tree to the\n                      order items were entered when toggled the other way. [Show\n                      your work in a new commit.]\n                    </i>\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: How would you prove that elements can be added and\n                      removed from the tree properly? [Show your work in a new\n                      commit.]\n                    </i>\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: How could you add a new level to an existing\n                      element. For example, if I wanted to add a level 1 animal\n                      from a level 0 animal. How could I add a level 1 \"lion\" to\n                      ant?\n                    </i>\n                  </li>\n                </ol>\n              </div>\n              <div className=\"App-step\">\n                <span role=\"img\" aria-label=\"drive\">\n                  üíæ\n                </span>\n                And persistence!\n              </div>\n              <div className=\"App-instructions\">\n                Check out the persistence API at:{\" \"}\n                <a href=\"https://jsonbin.io/\">https://jsonbin.io/</a>\n                <ol>\n                  <li>\n                    Setup: You will need to create an account to obtain the api\n                    key. Then, create the Bin where you will Read and Update\n                    your JSON payload by referencing the Bin ID. See:{\" \"}\n                    <a href=\"https://jsonbin.io/api-reference/bins/read\">\n                      Bins API Reference\n                    </a>\n                  </li>\n                  <li>\n                    Save your tree whenever a new element is added or deleted.\n                  </li>\n                  <li>\n                    Commit your changes and push to remote when you can make a\n                    changes to the tree that are fetched from the API on page\n                    refresh.\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: Add a debouncer to only save the tree when it's\n                      changed.\n                    </i>\n                  </li>\n                  <li>\n                    <i>\n                      Bonus: How would you use this API to make a (more or less)\n                      collaborative tree editing app? How collaborative could it\n                      be? What limits would it have?\n                    </i>\n                  </li>\n                </ol>\n              </div>\n            </div>\n          </Col>\n          <Col sm={6}>\n            <Tree />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}